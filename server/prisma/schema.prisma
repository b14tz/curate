// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ROLE {
  ADMIN
  USER
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

model User {
  id                 String        @id @default(cuid())
  role               ROLE          @default(USER)
  displayName        String        @unique
  email              String        @unique
  firstName          String
  lastName           String
  bio                String
  connectedToSpotify Boolean
  connectedToApple   Boolean
  createdAt          DateTime      @default(now())
  posts              Post[]
  comments           PostComment[]
  likes              PostLike[]
  followers          Follow[]      @relation("follower")
  following          Follow[]      @relation("following")
}

model Follow {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  id          String        @id @default(cuid())
  title       String
  description String
  isrcs       String
  origin      String
  downloads   Int
  createdAt   DateTime      @default(now())
  author      User?         @relation(fields: [authorId], references: [id])
  authorId    String?
  comments    PostComment[]
  likes       PostLike[]

  @@index([authorId])
}

model PostComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  @@index([postId])
  @@index([authorId])
}

model PostLike {
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  actor     User     @relation(fields: [userId], references: [id])
  userId    String

  @@id([userId, postId])
  @@index([postId])
  @@index([userId])
}

model ClientToken {
  id        String   @id @default(cuid())
  value     String
  createdAt DateTime @default(now())
}
